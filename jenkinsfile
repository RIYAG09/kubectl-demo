pipeline {
    agent {
            kubernetes {
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins
spec:
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
    - name: kube-config
      emptyDir: {}
  containers:
  - name: docker
    image: docker:latest
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  - name: kubectl
    image: bitnami/kubectl:latest
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /root/.kube
      name: kube-config
"""
        }
    }

    environment {
        DOCKER_IMAGE = 'riya299/my-kubectl-image:latest'
    }

    stages {
		
        stage('Checkout') {
            steps {
                git url: 'https://github.com/RIYAG09/kubectl-demo.git', branch: 'main'
            }
        }

         stage ('docker hub login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker-hub-creds', passwordVariable: 'password', usernameVariable: 'username')]) {
                    // sh 'docker login -u $username -p $password'
                    container("docker") {
                    script {
                        sh """
                        docker login -u $username -p $password
                        """
                    }
                }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container("docker") {
                    script {
                        sh """
                        docker push riya299/my-kubectl-image:latest
                        """
                    }
                }
            }
        }
    }
}
